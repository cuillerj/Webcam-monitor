{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"determineFoscamv3","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO6FMnF8xglYfTNOtNBKigR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":185,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WbHRbfoYkZby","executionInfo":{"status":"ok","timestamp":1647188866840,"user_tz":-60,"elapsed":42,"user":{"displayName":"jean cuiller","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVV6YEk6NIgV_xxbbAG4VUzGr-Vb7GLo2ynZM4kQ=s64","userId":"08361246649758684646"}},"outputId":"23f1ca73-58c5-418d-afef-52da331a1053"},"outputs":[{"output_type":"stream","name":"stdout","text":["2.2.0\n","<mysql.connector.connection.MySQLConnection object at 0x000001FD913C1910>\n"]}],"source":["import tensorflow as tf\n","import IPython.display as display\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import os\n","import pathlib\n","from pathlib import Path\n","import pandas as pd\n","import shutil\n","import random\n","tf.__version__\n","from skimage import data\n","import matplotlib.pyplot as plt \n","%matplotlib inline\n","from PIL import Image, ImageDraw, ImageFilter,ImageOps\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from datetime import datetime\n","print(tf.__version__)\n","import mysql.connector\n","domotique = mysql.connector.connect(\n","  host=\"192.168.1.199\",\n","  user=\"jean\",\n","  password=\"manu7890\",\n","  database=\"domotiquedata\"\n",")\n","\n","print(domotique)"]},{"cell_type":"code","source":["left = 15\n","top = 80\n","right = 1250\n","bottom = 720\n","left2 = 160\n","top2 = 280\n","right2 = 850\n","bottom2 = 600\n","labels =['ras','something']\n","IMG_WIDTH=round((right-left)/2)\n","IMG_HEIGHT=round((bottom-top)/2)\n","newsize =(IMG_WIDTH,IMG_HEIGHT)\n","IMG_WIDTH2=round((right2-left2)/2)\n","IMG_HEIGHT2=round((bottom2-top2)/2)\n","newsize2 =(IMG_WIDTH2,IMG_HEIGHT2)\n","imageQuality = 75\n","print(newsize2)\n","origin_dir='X:/foscam/'\n","day_Dir = pathlib.Path(os.path.join(origin_dir,'toDetermineDay2')) # must contain a sudirectory for test generator\n","day_dir = pathlib.Path(os.path.join(origin_dir,'toDetermineDay2/files'))\n","dayList = list(day_dir.glob('*.jpg'))\n","print (\"nombre de photos couleur à determiner:\",len(dayList))\n","night_Dir = pathlib.Path(os.path.join(origin_dir,'toDetermineNight'))\n","night_dir = pathlib.Path(os.path.join(origin_dir,'toDetermineNight/files'))\n","nightList = list(night_dir.glob('*.jpg'))\n","print (\"nombre de photos N&B à determiner:\",len(nightList))\n","checkpoint_path = \"E:/Colab/Foscam/trainingv3/cp.ckpt\"\n","checkpoint_dir = os.path.dirname(checkpoint_path)\n","print(day_dir)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x9eAoP3ulHSI","executionInfo":{"status":"ok","timestamp":1647188870402,"user_tz":-60,"elapsed":130,"user":{"displayName":"jean cuiller","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVV6YEk6NIgV_xxbbAG4VUzGr-Vb7GLo2ynZM4kQ=s64","userId":"08361246649758684646"}},"outputId":"af3dceff-b9ad-44d8-da38-a14cb45c8d66"},"execution_count":186,"outputs":[{"output_type":"stream","name":"stdout","text":["(345, 160)\n","nombre de photos couleur à determiner: 11\n","nombre de photos N&B à determiner: 777\n","X:\\foscam\\toDetermineDay2\\files\n"]}]},{"cell_type":"code","source":["def insert_Picture(name,value,det,type):\n","  mycursor = domotique.cursor()\n","  sql = \"INSERT INTO webCamPictures (now(), pictureName, pictureDetermineValue, pictureDetermination,pictureType VALUES (%s,%s, %s,%s)\"\n","  val = (name,value,det,type)\n","  mycursor.execute(sql, val)\n","  mydb.commit()"],"metadata":{"id":"nHswWTzFFjme","executionInfo":{"status":"ok","timestamp":1647189615471,"user_tz":-60,"elapsed":15,"user":{"displayName":"jean cuiller","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVV6YEk6NIgV_xxbbAG4VUzGr-Vb7GLo2ynZM4kQ=s64","userId":"08361246649758684646"}}},"execution_count":210,"outputs":[]},{"cell_type":"code","source":["model = Sequential([\n","    Conv2D(8, 1, padding='same', activation='relu', input_shape=(IMG_HEIGHT2, IMG_WIDTH2 ,3)),\n","    MaxPooling2D(),\n","    Conv2D(16, 3, padding='same', activation='relu'),\n","    MaxPooling2D(),\n","    Conv2D(32, 3, padding='same', activation='relu'),\n","    MaxPooling2D(),\n","    Conv2D(64, 3, padding='same', activation='relu'),\n","    MaxPooling2D(),\n","    Conv2D(128, 3, padding='same', activation='relu'),\n","    MaxPooling2D(),\n","    Flatten(),\n","    Dense(512, activation='relu'),\n","    Dense(1)\n","])\n","model.compile(optimizer='adam',\n","              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n","              metrics=['accuracy'])\n","model.summary()\n","latest = tf.train.latest_checkpoint(checkpoint_dir)\n","model.load_weights(latest)\n","print(\"weights loaded\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sgarA_IE2Rc8","executionInfo":{"status":"ok","timestamp":1647188946192,"user_tz":-60,"elapsed":674,"user":{"displayName":"jean cuiller","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVV6YEk6NIgV_xxbbAG4VUzGr-Vb7GLo2ynZM4kQ=s64","userId":"08361246649758684646"}},"outputId":"60a39547-1a4e-4784-960c-2c52c04b6c80"},"execution_count":189,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_13\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_65 (Conv2D)           (None, 160, 345, 8)       32        \n","_________________________________________________________________\n","max_pooling2d_65 (MaxPooling (None, 80, 172, 8)        0         \n","_________________________________________________________________\n","conv2d_66 (Conv2D)           (None, 80, 172, 16)       1168      \n","_________________________________________________________________\n","max_pooling2d_66 (MaxPooling (None, 40, 86, 16)        0         \n","_________________________________________________________________\n","conv2d_67 (Conv2D)           (None, 40, 86, 32)        4640      \n","_________________________________________________________________\n","max_pooling2d_67 (MaxPooling (None, 20, 43, 32)        0         \n","_________________________________________________________________\n","conv2d_68 (Conv2D)           (None, 20, 43, 64)        18496     \n","_________________________________________________________________\n","max_pooling2d_68 (MaxPooling (None, 10, 21, 64)        0         \n","_________________________________________________________________\n","conv2d_69 (Conv2D)           (None, 10, 21, 128)       73856     \n","_________________________________________________________________\n","max_pooling2d_69 (MaxPooling (None, 5, 10, 128)        0         \n","_________________________________________________________________\n","flatten_13 (Flatten)         (None, 6400)              0         \n","_________________________________________________________________\n","dense_26 (Dense)             (None, 512)               3277312   \n","_________________________________________________________________\n","dense_27 (Dense)             (None, 1)                 513       \n","=================================================================\n","Total params: 3,376,017\n","Trainable params: 3,376,017\n","Non-trainable params: 0\n","_________________________________________________________________\n","weights loaded\n"]}]},{"cell_type":"code","source":["day_image_generator = ImageDataGenerator(rescale=1./255) # Generator for our test data\n","day_generator = test_image_generator.flow_from_directory(batch_size=len(dayList),\n","                                                              directory=day_Dir,\n","                                                              shuffle=False,\n","                                                              target_size=(IMG_HEIGHT2, IMG_WIDTH2),\n","                                                              class_mode='binary')\n","STEP_SIZE_TEST=day_generator.n //test_generator.batch_size\n","test_generator.reset()\n","predDay=model.predict(day_generator,steps=STEP_SIZE_TEST,verbose=1)\n","predDay.size"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RwmCRNzo4WhL","executionInfo":{"status":"ok","timestamp":1647188949033,"user_tz":-60,"elapsed":227,"user":{"displayName":"jean cuiller","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVV6YEk6NIgV_xxbbAG4VUzGr-Vb7GLo2ynZM4kQ=s64","userId":"08361246649758684646"}},"outputId":"59ee96a4-b652-4fb7-9f47-1b7313ad6164"},"execution_count":190,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 11 images belonging to 1 classes.\n","1/2 [==============>...............] - ETA: 0sWARNING:tensorflow:Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches (in this case, 2 batches). You may need to use the repeat() function when building your dataset.\n","1/2 [==============>...............] - 0s 8ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["11"]},"metadata":{},"execution_count":190}]},{"cell_type":"code","source":["xDay=predDay>=0\n","predicted_class_indices=[int(item) for item in xDay]\n","predictions = [labels[k] for k in predicted_class_indices]\n","values  = [predDay[k][0] for k in range(predDay.size)]\n","\n","filenames=day_generator.filenames\n","print(len(filenames),len(predictions),len(values))\n","results=pd.DataFrame({\"Filename\":filenames,\"Predictions\":predictions,\"values\":values})\n","results.to_csv(\"E:/CodePython/csvFiles/predictions.csv\",index=False)\n","predF=pd.read_csv('E:/CodePython/csvFiles/predictions.csv')\n","nbRecords=predF['Predictions'].size\n","for i in range (nbRecords):\n","      pred=predF['Predictions'][i]\n","      print(pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FwDFYkWozJMZ","executionInfo":{"status":"ok","timestamp":1647189225926,"user_tz":-60,"elapsed":19,"user":{"displayName":"jean cuiller","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVV6YEk6NIgV_xxbbAG4VUzGr-Vb7GLo2ynZM4kQ=s64","userId":"08361246649758684646"}},"outputId":"5a3fa71a-9a14-4335-d522-6358ce69470b"},"execution_count":196,"outputs":[{"output_type":"stream","name":"stdout","text":["11 11 11\n","ras\n","ras\n","something\n","something\n","ras\n","ras\n","something\n","something\n","something\n","something\n","something\n"]}]},{"cell_type":"code","source":["x=max(predDay)\n","idx=np.where(predDay==x)\n","listArr=np.asarray(dayList)\n","predicted_class_indices=[int(item) for item in xDay]\n","predictions = [labels[k] for k in predicted_class_indices]\n","values  = [predDay[k][0] for k in range(predDay.size)]\n","print(x)\n","id=idx[0]\n","print(id)\n","name=print(listArr[id])\n","#det=predictions[id]\n","#print(listArr)\n","insert_Picture(\"test\",0,\"something\",1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":781},"id":"6WYL_mTX4hPx","executionInfo":{"status":"error","timestamp":1647189622987,"user_tz":-60,"elapsed":35,"user":{"displayName":"jean cuiller","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVV6YEk6NIgV_xxbbAG4VUzGr-Vb7GLo2ynZM4kQ=s64","userId":"08361246649758684646"}},"outputId":"d59817e6-bc91-4b76-ca1a-efffb5964149"},"execution_count":211,"outputs":[{"output_type":"stream","name":"stdout","text":["[78.08293]\n","[7]\n","[WindowsPath('X:/foscam/toDetermineDay2/files/MDAlarm_20220313-101030.jpg')]\n"]},{"output_type":"error","ename":"ProgrammingError","evalue":"ignored","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mProgrammingError\u001b[0m                          Traceback (most recent call last)","\u001b[1;32m<ipython-input-211-9950d70502b4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[1;31m#det=predictions[id]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[1;31m#print(listArr)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 13\u001b[1;33m \u001b[0minsert_Picture\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"test\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"something\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[1;32m<ipython-input-210-42101e62c900>\u001b[0m in \u001b[0;36minsert_Picture\u001b[1;34m(name, value, det, type)\u001b[0m\n\u001b[0;32m      3\u001b[0m   \u001b[0msql\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"INSERT INTO webCamPictures (now(), pictureName, pictureDetermineValue, pictureDetermination,pictureType VALUES (%s,%s, %s,%s)\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m   \u001b[0mval\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mdet\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m   \u001b[0mmycursor\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msql\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mval\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m   \u001b[0mmydb\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcommit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;32me:\\codepython\\colabenv\\lib\\site-packages\\mysql\\connector\\cursor.py\u001b[0m in \u001b[0;36mexecute\u001b[1;34m(self, operation, params, multi)\u001b[0m\n\u001b[0;32m    575\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    576\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 577\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_handle_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_connection\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcmd_query\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mstmt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    578\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mInterfaceError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    579\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_connection\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_have_next_result\u001b[0m\u001b[1;33m:\u001b[0m  \u001b[1;31m# pylint: disable=W0212\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;32me:\\codepython\\colabenv\\lib\\site-packages\\mysql\\connector\\connection.py\u001b[0m in \u001b[0;36mcmd_query\u001b[1;34m(self, query, raw, buffered, raw_as_string)\u001b[0m\n\u001b[0;32m    693\u001b[0m             \u001b[0mquery\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mquery\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'utf-8'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    694\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 695\u001b[1;33m             \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_handle_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_send_cmd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mServerCmd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mQUERY\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mquery\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    696\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mProgrammingError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    697\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0merrno\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m3948\u001b[0m \u001b[1;32mand\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;32me:\\codepython\\colabenv\\lib\\site-packages\\mysql\\connector\\connection.py\u001b[0m in \u001b[0;36m_handle_result\u001b[1;34m(self, packet)\u001b[0m\n\u001b[0;32m    580\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_handle_eof\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpacket\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    581\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mpacket\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m255\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 582\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_exception\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpacket\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    583\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    584\u001b[0m         \u001b[1;31m# We have a text result set\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;31mProgrammingError\u001b[0m: 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'now(), pictureName, pictureDetermineValue, pictureDetermination,pictureType VALU' at line 1"]}]},{"cell_type":"code","source":["night_image_generator = ImageDataGenerator(rescale=1./255) # Generator for our test data\n","night_generator = test_image_generator.flow_from_directory(batch_size=5,\n","                                                              directory=night_Dir,\n","                                                              target_size=(IMG_HEIGHT2, IMG_WIDTH2),\n","                                                              class_mode='binary')\n","STEP_SIZE_TEST=night_generator.n //test_generator.batch_size\n","test_generator.reset()\n","predDay=model.predict(night_generator,steps=STEP_SIZE_TEST,verbose=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fpna0VMJI1Nz","executionInfo":{"status":"ok","timestamp":1647165616229,"user_tz":-60,"elapsed":22297,"user":{"displayName":"jean cuiller","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVV6YEk6NIgV_xxbbAG4VUzGr-Vb7GLo2ynZM4kQ=s64","userId":"08361246649758684646"}},"outputId":"fb8b70b8-fa97-4a92-9513-9b08e2d99d95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 777 images belonging to 1 classes.\n","155/155 [==============================] - 22s 140ms/step\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"T52g_LWX9DDT"},"execution_count":null,"outputs":[]}]}